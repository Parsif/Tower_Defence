from random import randint

import pygame


class BoardTypes:
    choice = 0
    is_generated = False

    @staticmethod
    def cnt_neighbours(board, coord):
        x, y = coord
        cnt = 0
        if y + 1 < len(board[0]) and (board[x][y + 1] == 0 or board[x][y + 1] == 1):
            cnt += 1
        if x - 1 >= 0 and (board[x - 1][y] == 0 or board[x - 1][y] == 1):
            cnt += 1
        if x + 1 < len(board) and (board[x - 1][y] == 0 or board[x + 1][y] == 1):
            cnt += 1
        if y - 1 >= 0 and (board[x - 1][y] == 0 or board[x][y - 1] == 1):
            cnt += 1

        return cnt

    @staticmethod
    def choose_nb(board, coord: tuple):
        x, y = coord
        nbs = []
        if y + 1 < len(board[0]) and (board[x][y + 1] == 0 or board[x][y + 1] == 1):
            nbs.append((x, y + 1))
        if x - 1 >= 0 and (board[x - 1][y] == 0 or board[x - 1][y] == 1):
            nbs.append((x - 1, y))

        if len(nbs) == 0:
            return None
        return nbs[randint(0, len(nbs) - 1)]

    def generate_board(self):
        empty_board = [
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 4
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 5
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 6
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 7
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 8
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 9
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 10
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 11
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 12
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 13
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 14
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 15
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 16
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 17
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 18
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 19
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 20
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 22
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 23
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
        ]

        start1 = (0, 3)
        start2 = (24, 5)
        start3 = (0, 14)
        end = (24, 19)

        empty_board[start1[0]][start1[1]] = -5000
        empty_board[start2[0]][start2[1]] = -5000
        empty_board[start3[0]][start3[1]] = -5000
        empty_board[end[0]][end[1]] = 5000

        i = 0
        for row in empty_board:
            j = 0
            for cell in row:
                nb = BoardTypes.choose_nb(empty_board, (i, j))
                if nb is not None:
                    empty_board[nb[0]][nb[1]] = 1
                j += 1

            i += 1

        self.is_generated = True
        return empty_board

    def get_board(self):
        print(self.choice)
        if self.choice == 1:
            return [
                [0, 0, 0, 0, -5000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5000, 0],  # 0
                [0, 0, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 0],  # 1
                [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0],  # 2
                [0, 1, 1, 0, 2, 0, 1, 0, 2, 2, 0, 1, 0, 2, 0, 1, 0, 2, 0, 0],  # 3
                [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],  # 4
                [0, 1, 0, 2, 0, 0, 1, 1, 1, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 0],  # 5
                [0, 1, 0, 2, 0, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0],  # 6
                [0, 1, 0, 0, 0, 0, 2, 0, 1, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 0],  # 7
                [0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],  # 8
                [0, 1, 0, 2, 0, 1, 1, 1, 1, 0, 0, 5000, 0, 2, 0, 1, 0, 2, 0, 0],  # 9
                [0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 0, 0, 0],  # 10
                [0, 1, 0, 0, 0, 1, 0, 2, 2, 2, 2, 2, 2, 2, 0, 1, 0, 2, 0, 0],  # 11
                [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],  # 12
                [0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 0],  # 13
                [0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0],  # 14
                [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 2, 2, 0, 0, 0],  # 15
                [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0],  # 16
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0],  # 17
                [0, 2, 2, 2, 2, 2, 0, 2, 2, 2, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0],  # 18
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],  # 19
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0],  # 20
                [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 21
                [0, 0, 0, 1, 0, 2, 0, 2, 2, 0, 2, 0, 0, 2, 2, 0, 2, 2, 0, 0],  # 22
                [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 23
                [0, 0, 0, -5000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
            ]

        elif self.choice == 2:
            return [
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 0
                [0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],  # 1
                [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],  # 2
                [0, 2, 0, 1, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0],  # 3
                [0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],  # 4
                [0, 2, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 1, 0],  # 5
                [0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],  # 6
                [0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 5000, 0, 1, 0, 2, 0, 1, 0],  # 7
                [0, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],  # 8
                [0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 0],  # 9
                [0, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],  # 10
                [0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 0],  # 11
                [0, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],  # 12
                [0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 0],  # 13
                [0, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],  # 14
                [0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 0],  # 15
                [0, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],  # 16
                [0, 2, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 2, 0, 1, 0],  # 17
                [0, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],  # 18
                [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 2, 0, 1, 0],  # 19
                [0, 0, 0, 1, 0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],  # 20
                [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 0],  # 21
                [0, 0, 0, 1, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],  # 22
                [0, 0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],  # 23
                [0, 0, 0, -5000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 24
            ]

        elif self.choice == 3:
            return self.generate_board()
            # return [
            #     [0, 0, 0, -5000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5000, 0],  # 0
            #     [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],  # 1
            #     [0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0],  # 2
            #     [0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0],  # 3
            #     [0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0],  # 4
            #     [0, 2, 0, 1, 0, 2, 0, 2, 0, 2, 0, 2, 2, 0, 2, 0, 2, 0, 1, 0],  # 5
            #     [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],  # 6
            #     [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0],  # 7
            #     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],  # 8
            #     [0, 1, 0, 2, 0, 2, 2, 0, 2, 2, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0],  # 9
            #     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],  # 10
            #     [0, 1, 0, 2, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0],  # 11
            #     [0, 1, 0, 2, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0],  # 12
            #     [0, 1, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0],  # 13
            #     [0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 1, 0],  # 14
            #     [0, 1, 0, 2, 0, 2, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0],  # 15
            #     [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0],  # 16
            #     [0, 1, 1, 1, 0, 2, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0],  # 17
            #     [0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 1, 0],  # 18
            #     [0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0],  # 19
            #     [0, 0, 0, 1, 0, 2, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 2, 0, 1, 0],  # 20
            #     [0, 0, 0, 1, 0, 0, 0, 0, 0, 2, 0, 1, 0, 2, 0, 0, 0, 0, 1, 0],  # 21
            #     [0, 0, 0, 1, 0, 2, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 1, 0],  # 22
            #     [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 5000, 0, 0, 0, 0, 0, 0, 1, 0],  # 23
            #     [0, 0, 0, -5000, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -5000, 0],  # 24
            # ]


board1_img = pygame.image.load(r'C:/Users/Влад/PycharmProjects/Tower_Defence/images/maps/map1.png')
board2_img = pygame.image.load(r'C:/Users/Влад/PycharmProjects/Tower_Defence/images/maps/map2.png')
board3_img = pygame.image.load(r'C:/Users/Влад/PycharmProjects/Tower_Defence/images/maps/map3.png')
